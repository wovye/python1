2022.03.14
>>> [1,2,3,4,5]
[1, 2, 3, 4, 5]
>>> [1,2,3,4,5,"上山"]
[1, 2, 3, 4, 5, '上山']
>>> me = [1,2,3,4,5,"上山"]
>>> print(me)
[1, 2, 3, 4, 5, '上山']
>>> for each in me:
	print(each)

	
1
2
3
4
5
上山
>>> me[0]
1
>>> len(me)
6
>>> me[0:3]
[1, 2, 3]
>>> me[3:6]
[4, 5, '上山']
>>> me[:3]
[1, 2, 3]
>>> me[3:]
[4, 5, '上山']
>>> me[:]
[1, 2, 3, 4, 5, '上山']
>>> me[0:6:2]
[1, 3, 5]
>>> me[::2]
[1, 3, 5]
>>> me[::-2]
['上山', 4, 2]
>>> me[::-1]
['上山', 5, 4, 3, 2, 1]
>>> heros = ["钢铁侠","绿巨人"]
>>> heros.append("黑寡妇")
>>> heros
['钢铁侠', '绿巨人', '黑寡妇']
>>> heros.extend(['鹰眼','灭霸','雷神'])
>>> heros
['钢铁侠', '绿巨人', '黑寡妇', '鹰眼', '灭霸', '雷神']
>>> #append一次只在末尾添加一个元素，exend参数必须是可迭代对象，追加到原列表后面
>>> s = [1,2,3,4,5]
>>> s[len(s):]=[6]
>>> s
[1, 2, 3, 4, 5, 6]
>>> s[len(s):]=[7, 8, 9]
>>> s
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> s = [1, 3, 5]
>>> s.insert(1, 2)
>>> s
[1, 2, 3, 5]
>>> s.insert(0, 0)
>>> s
[0, 1, 2, 3, 5]
>>> s.insert(4, 4)
>>> s
[0, 1, 2, 3, 4, 5]
>>> s.insert(len(s),6)
>>> s
[0, 1, 2, 3, 4, 5, 6]
>>> #指定位置添加元素用insert(),
>>> heros.remove('灭霸')
>>> heros
['钢铁侠', '绿巨人', '黑寡妇', '鹰眼', '雷神']
>>> #remove()一次只删除一个元素，有多个时删除下标最小的一个，元素不存在时会报错
>>> heros.pop(2)
'黑寡妇'
>>> heros
['钢铁侠', '绿巨人', '鹰眼', '雷神']
>>> heros.clear()
>>> #pop()删除指定位置的元素，clear()清空列表

>>> heros = ['钢铁侠', '绿巨人', '黑寡妇', '鹰眼', '灭霸', '雷神']
>>> heros[4] = '蜘蛛侠'
>>> heros
['钢铁侠', '绿巨人', '黑寡妇', '鹰眼', '蜘蛛侠', '雷神']
>>> heros[3:] = ['武松','刘能','赵四儿']
>>> heros
['钢铁侠', '绿巨人', '黑寡妇', '武松', '刘能', '赵四儿']
>>> #这个过程分两步实现，第一步把指定元素删除，第二步把新元素赋值到指定位置
>>> nums = [3, 4, 1, 6, 9, 8]
>>> nums.sort（）
SyntaxError: invalid character in identifier
>>> nums.sort()
>>> nums
[1, 3, 4, 6, 8, 9]
>>> nums.reverse()
>>> nums
[9, 8, 6, 4, 3, 1]
>>> #sort()从小到大排列，reverse()是将第一个与最后一个互换，第二个与倒数第二个互换
>>> nums.reverse()
>>> nums
[1, 3, 4, 6, 8, 9]
>>> nums = [3, 4, 1, 6, 9, 8]
>>> nums.sort(reverse = True)
>>> nums
[9, 8, 6, 4, 3, 1]
>>> nums.count(1)
1
>>> heros.index('赵四儿')
5
>>> heros[heros.index('刘能')] = '大脚'
>>> heros
['钢铁侠', '绿巨人', '黑寡妇', '武松', '大脚', '赵四儿']
>>> #count()查某一元素个数，index()查找指定元素位置
>>> nums = [1, 2, 1, 3, 4, 1]
>>> nums.index(1, 1, 4)
2
>>> #从第二到第五个元素中第一个'1'的位置
>>> nums.index(1)
0
>>> copy
>>> nums
[1, 2, 1, 3, 4, 1]
>>> num3 = nums.copy()
>>> num3
[1, 2, 1, 3, 4, 1]
>>> num2 = nums[:]
>>> num2
[1, 2, 1, 3, 4, 1]
>>> num1 = nums
>>> num1
[1, 2, 1, 3, 4, 1]


>>> #列表的运算
>>> s = [1,2,3]
>>> t = [4, 5, 6]
>>> s + t
[1, 2, 3, 4, 5, 6]
>>> s * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
>>> #嵌套列表
>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> matrix = [[1, 2, 3],]
>>> matrix = [[1, 2, 3],
	      [4, 5, 6],
	      [7, 8, 9]]
>>> matrix
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> #matrix矩阵
>>> #访问嵌套列表
>>> for i in matrix:
	for each in i:
		print(each)

		
1
2
3
4
5
6
7
8
9
>>> for i in matrix:
	for each in i:
		print(each, end=' ')
	print()

	
1 2 3 
4 5 6 
7 8 9 
>>> matrix[0]
[1, 2, 3]
>>> matrix(0)
Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    matrix(0)
TypeError: 'list' object is not callable
>>> matrix[0][0]
1
>>> matrix[0,0]
Traceback (most recent call last):
  File "<pyshell#22>", line 1, in <module>
    matrix[0,0]
TypeError: list indices must be integers or slices, not tuple
>>> A = [0]*3
>>> A
[0, 0, 0]
>>> for i in range(3):
	A[i] = [0] * 3

	
>>> A
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
>>> A[1][1] = 1
>>> A
[[0, 0, 0], [0, 1, 0], [0, 0, 0]]
>>> x = '樱桃'
>>> y = '樱桃'
>>> x is y
False
>>> y = '樱桃'
>>> y = "樱桃"
>>> x = "樱桃"
>>> x is y
False
>>> a = 'cat'
>>> b = 'cat'
>>> a is b
True
>>> c = '123'
>>> d = '123'
>>> c is d
True
>>> f = [1, 2, 3]
>>> e = [1, 2, 3]
>>> e is f
False
>>> #错误写法
>>> B = [[0] * 3] * 3
>>> B
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
>>> B[1][1]=1
>>> B
[[0, 1, 0], [0, 1, 0], [0, 1, 0]]
>>> #A中是三个列表分别储存，B中是对一个列表进行拷贝，只是对同一列表的引用
>>> 


03.15浅拷贝与深拷贝
>>> x = [1, 2, 3]
>>> y = x
>>> y
[1, 2, 3]
>>> x[0] = 4
>>> x
[4, 2, 3]
>>> y
[4, 2, 3]
>>> y[0] = 5
>>> y
[5, 2, 3]
>>> x
[5, 2, 3]
>>> y = x.copy()
>>> x
[5, 2, 3]
>>> y
[5, 2, 3]
>>> y[1] = 1
>>> x
[5, 2, 3]
>>> y
[5, 1, 3]
>>> #浅拷贝
>>> #切片法
>>> x = [1, 2, 3]
>>> y = x[:]
>>> x[1] = 1
>>> x
[1, 1, 3]
>>> y
[1, 2, 3]
>>> #浅拷贝只用于一维列表，对于嵌套列表不适用
>>> x = [[1, 2, 3], [4, 5, 6],[7, 8, 9]]
>>> y = x.copy()
>>> y
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> x[1][1] = 0
>>> x
[[1, 2, 3], [4, 0, 6], [7, 8, 9]]
>>> y
[[1, 2, 3], [4, 0, 6], [7, 8, 9]]
>>> #copy模块
>>> import copy
>>> x = [[1, 2, 3], [4, 5, 6],[7, 8, 9]]
>>> y = copy.copy(x)
>>> x[1][1] = 0
>>> x
[[1, 2, 3], [4, 0, 6], [7, 8, 9]]
>>> y
[[1, 2, 3], [4, 0, 6], [7, 8, 9]]
>>> #copy模块有两个函数：copy和deepcopy，分别为浅拷贝和深拷贝
>>> x = [[1, 2, 3], [4, 5, 6],[7, 8, 9]]
>>> y = copy.deepcopy(x)
>>> x[1][1] = 0
>>> x
[[1, 2, 3], [4, 0, 6], [7, 8, 9]]
>>> y
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> 


>>> #列表推导式
>>> x = [1, 2, 3, 4, 5]
>>> for i in range(len(x)):#len函数获取列表长度，range函数分配下标
	x[i] = x[i] * 2

	
>>> x
[2, 4, 6, 8, 10]
>>> x = [1, 2, 3, 4, 5]
>>> x = [i * 2 for i in x]
>>> x
[2, 4, 6, 8, 10]
>>> y = [i for i in range(10)]
>>> y
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> y = [i + 1 for i in range(10)]
>>> y
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> z = [i * 2 for i in 'liuneng']
>>> z
['ll', 'ii', 'uu', 'nn', 'ee', 'nn', 'gg']
>>> code = [ord(c) for c in 'FishC']
>>> #ord内置函数的作用是将单个字符串转换成对应的编码
>>> code
[70, 105, 115, 104, 67]
>>> matrix = [[1, 2, 3],
	      [4, 5, 6],
	      [7, 8, 9]]
>>> col2 = [row[1] for row in matrix]
>>> col2
[2, 5, 8]
>>> #通过for选取每一行，row[1]选取每行第二个元素
>>> diag = [matrix[i][i] for i in range(len(matrix))]
>>> diag
[1, 5, 9]
>>> #这次从for循环中得到的是索引值00，11，22
>>> diag3 = [matrix[i][lenmatrix(m)-1-i] for i in range(len(matrix))]
Traceback (most recent call last):
  File "<pyshell#25>", line 1, in <module>
    diag3 = [matrix[i][lenmatrix(m)-1-i] for i in range(len(matrix))]
  File "<pyshell#25>", line 1, in <listcomp>
    diag3 = [matrix[i][lenmatrix(m)-1-i] for i in range(len(matrix))]
NameError: name 'lenmatrix' is not defined
>>> diag3 = [matrix[i][len(matrix)-1-i] for i in range(len(matrix))]
>>> diag3
[3, 5, 7]
>>> #循环和列表推导式不完全一样，循环是通过迭代逐个修改原列表中的元素，列表推导式是直接创建一个新的列表，然后再赋值为原先的这个变量名
>>> #列表推导式创建二维列表
>>> s = [[0] * 3 for  i in range(3)]
>>> s
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
>>> s[1][1] = 1
>>> s
[[0, 0, 0], [0, 1, 0], [0, 0, 0]]
>>> range(3)
range(0, 3)
>>> even = [i for i in range(10) if i % 2 == 0]
>>> even
[0, 2, 4, 6, 8]
>>> #先执行for语句，再执行if语句，最后执行i
>>> even = [i + 1 for i in range(10) if i % 2 == 0]
>>> even
[1, 3, 5, 7, 9]
>>> words = ['Great', 'Fishc', 'Brilliant', 'Excellent', 'Fantastic']
>>> fwords = [w for w in words if w[0] == 'F']
>>> fwords
['Fishc', 'Fantastic']
>>> #二维列表降为一维
>>> matrix = [[1, 2, 3], [4, 5, 6],[7, 8, 9]]
>>> flatten = [col for row in matrix for col in row]
>>> flatten
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> flatten = []
>>> for row in matrix: for col in row
SyntaxError: invalid syntax
>>> for row in matrix:
	for col in row:
		flatten.append(col)

		
>>> flatten
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> #笛卡尔乘积
>>> [x + y for x in 'fishc' for y in 'FISHC']
['fF', 'fI', 'fS', 'fH', 'fC', 'iF', 'iI', 'iS', 'iH', 'iC', 'sF', 'sI', 'sS', 'sH', 'sC', 'hF', 'hI', 'hS', 'hH', 'hC', 'cF', 'cI', 'cS', 'cH', 'cC']
>>> _ = []#若一个变量是临时的，无关紧要的，可用_下划线当变量名
>>> for x in 'fishc':
	for y in 'FISHC':
		_.append(x + y)

		
>>> _
['fF', 'fI', 'fS', 'fH', 'fC', 'iF', 'iI', 'iS', 'iH', 'iC', 'sF', 'sI', 'sS', 'sH', 'sC', 'hF', 'hI', 'hS', 'hH', 'hC', 'cF', 'cI', 'cS', 'cH', 'cC']
>>> [[x, y] for x in range(10) if x % 2 == 0 for y in range(10) if y % 3 == 0]
[[0, 0], [0, 3], [0, 6], [0, 9], [2, 0], [2, 3], [2, 6], [2, 9], [4, 0], [4, 3], [4, 6], [4, 9], [6, 0], [6, 3], [6, 6], [6, 9], [8, 0], [8, 3], [8, 6], [8, 9]]
>>> #每个for后面都可以跟一个if筛选条件
>>> _ = []
>>> for x in range(10):
	if x % 2 == 0:
		for y in range(10):
			if y % 3 == 0:
				_.append(x, y)

				
Traceback (most recent call last):
  File "<pyshell#69>", line 5, in <module>
    _.append(x, y)
TypeError: append() takes exactly one argument (2 given)
>>> for x in range(10):
	if x % 2 == 0:
		for y in range(10):
			if y % 3 == 0:
				_.append[x, y]

				
Traceback (most recent call last):
  File "<pyshell#71>", line 5, in <module>
    _.append[x, y]
TypeError: 'builtin_function_or_method' object is not subscriptable
>>> for x in range(10):
	if x % 2 == 0:
		for y in range(10):
			if y % 3 == 0:
				_.append([x, y])

				
>>> _
[[0, 0], [0, 3], [0, 6], [0, 9], [2, 0], [2, 3], [2, 6], [2, 9], [4, 0], [4, 3], [4, 6], [4, 9], [6, 0], [6, 3], [6, 6], [6, 9], [8, 0], [8, 3], [8, 6], [8, 9]]
>



>>> #元组
>>> #既可以同时容纳多种类型的对象，也拥有字符串不可变的特性
>>> #元组用（），列表用[]
>>> rhyme = (1, 2, 3, 4, 5, '喜羊羊'）
	 
SyntaxError: invalid character in identifier
>>> rhyme = (1, 2, 3, 4, 5, '喜羊羊')
>>> rhyme
(1, 2, 3, 4, 5, '喜羊羊')
>>> rhyme[0]
1
>>> rhyme[-1]
'喜羊羊'
>>> rhyme[1] = 101
Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    rhyme[1] = 101
TypeError: 'tuple' object does not support item assignment
>>> #不可变
>>> #可切片
>>> rhyme[3:]
(4, 5, '喜羊羊')
>>> rhyme[:3]
(1, 2, 3)
>>> 
>>> rhyme[::2]
(1, 3, 5)
>>> rhyme[::-1]
('喜羊羊', 5, 4, 3, 2, 1)
>>> nums = (1, 4, 2, 5, 3, 4, 2, 1, 8)
>>> nums.count(3)
1
>>> nums.count(2)
2
>>> katong = ('熊大', '熊二', '虹猫')
>>> katong.index('熊二')
1
>>> s = (1, 2, 3)
>>> t = (4, 5, 6)
>>> s + t
(1, 2, 3, 4, 5, 6)
>>> s *3
(1, 2, 3, 1, 2, 3, 1, 2, 3)
>>> #元组嵌套
>>> a = s, t
>>> a
((1, 2, 3), (4, 5, 6))
>>> #元组支持迭代
>>> for each in s:
	print(each)

	
1
2
3
>>> for i in a:
	for each in i:
		print(each)

		
1
2
3
4
5
6
>>> #元组转列表，通过列表推导式
>>> [i for i in s]
[1, 2, 3]
>>> [i * 2 for i in s]
[2, 4, 6]
>>> #不存在元组推导式
>>> （i for i in s）
SyntaxError: invalid character in identifier
>>> （each for each in s）
SyntaxError: invalid character in identifier
>>> #生成只有一个元素的元组
>>> x = (123)#错
>>> x
123
>>> type(x)
<class 'int'>
>>> y = (520,)
>>> y
(520,)
>>> type(y)
<class 'tuple'>
>>> #正确
>>> #生成一个元组有时也叫打包
>>> t = (123, 'asd', 3.14)
>>> t
(123, 'asd', 3.14)
>>> x, y, z = t
>>> x
123
>>> y
'asd'
>>> z
3.14
>>> 
>>> t = [123, 'asd', 3.14]
>>> q, w, e =t
>>> q
123
>>> w
'asd'
>>>  e
 
SyntaxError: unexpected indent
>>> e
3.14
>>> #解包需要注意赋值号左边变量名数量必须跟右侧序列的元素数量一致
>>> a, s, d, f, g = 'qwert'
>>> a
'q'
>>> s
'w'
d
>>> f
'r'
>>> g
't'
>>> h
Traceback (most recent call last):
  File "<pyshell#70>", line 1, in <module>
    h
NameError: name 'h' is not defined
>>> d
'e'
>>> a, s, d = 'qwert'
Traceback (most recent call last):
  File "<pyshell#72>", line 1, in <module>
    a, s, d = 'qwert'
ValueError: too many values to unpack (expected 3)
>>> a, s, *d = 'qwert'
>>> a
'q'
>>> s
'w'
>>> d
['e', 'r', 't']
>>> x, y = 10, 20
>>> x
10
>>> y
20
>>> s =[1, 2, 3]
>>> t = [4, 5, 6]
>>> w =(s, t)
>>> w
([1, 2, 3], [4, 5, 6])
>>> w[0][0] = 9
>>> w
([9, 2, 3], [4, 5, 6])
>>> #当元组中的元素指向一个可变的列表，依然可以修改列表里的内容
>>> s
[9, 2, 3]




3.21
>>> #字符串
>>> #字符串是和元组相似的不可变序列
>>> x = '12321'
>>> '是回文数' if x == x[:: 1] else '不是回文数'
'是回文数'
>>> x = '1234'
>>> '是回文数' if x == x[:: 1] else '不是回文数'
'是回文数'
>>> '是回文数' if x == x[::-1] else '不是回文数'
'不是回文数'
>>> #capitalize()将字符串首字母大写，其他小写
>>> x = 'wewfwwf'
>>> x.capitalize()
'Wewfwwf'
>>> y = 'sef是'
>>> y.capitalize()
'Sef是'
>>> z = '士大夫sef'
>>> z.capitalize()
'士大夫sef'
>>> #casefold()字母全小写
>>> x = 'QDFW'
>>> x.casefold()
'qdfw'
>>> y = '双生QQF'
>>> y.casefold()
'双生qqf'
>>> #title()将字符串中每个单词的首字母大写，该单词其他字母小写
>>> x = 'a dadad ada'
>>> x.title()
'A Dadad Ada'
>>> y = '阿迪斯aad ada adad阿萨 阿达
SyntaxError: EOL while scanning string literal
>>> y = '阿迪斯aad ada adad阿萨 阿达'
>>> y.title()
'阿迪斯Aad Ada Adad阿萨 阿达'
>>> z = 'ada阿萨asaADA'
>>> z.title()
'Ada阿萨Asaada'
>>> #swapcase()大小写翻转，大变小，小写变大写
>>> x = 'adsEWEFas阿达asdsdaADAS'
>>> x.swapcase()
'ADSewefAS阿达ASDSDAadas'
>>> #upper()将所有字母变成大写，lower()将所有字母变成小写
>>> x = 'adsdADS阿达asdASD'
>>> x.upper()
'ADSDADS阿达ASDASD'
>>> x.lower()
'adsdads阿达asdasd'
>>> #lower()只能处理英文字母大小写，casefold()除了英文，还可以处理其他语言字母，如德语···
>>> #左中右对齐
>>> #中间有width参数，若width<=源字符串长度，直接源字符串输出

>>> x = '有内鬼'
>>> x.center(2)
'有内鬼'
>>> x.center(6)
' 有内鬼  '
>>> x.ljust(12)
'有内鬼         '
>>> x.rjust(12)
'         有内鬼'
>>> x.zfill(12)
'000000000有内鬼'
>>> #另还有填充
>>> x.center(6, '淦')
'淦有内鬼淦淦'
>>> x.ljust(12, '淦')
'有内鬼淦淦淦淦淦淦淦淦淦'


#字符串  查找功能
>>> #count(sub[,start[,end]])查找字符串中某字符出现次数，两个可选参数start和end指定查找开始和结束位置
>>> x = '上海自来水来自海上'
>>> x.count('海')
2
>>> x.count('海', 0, 5)
1
>>> y = 'qwertyuqwert'
>>> y.count('qwe')
2
>>> #find()和rfind()是查找所选字符的下标值，find从左往右找，rfind从右往左找
>>> x.find('海')
1
>>> x.rfind('海')
7
>>> y.find('qw')
0
>>> y.find('we')
1
>>> y.rfind('we')
8
>>> #查找字符串中不存在的子字符串
>>> x.find('贵')
-1
>>> x.index('龟')
Traceback (most recent call last):
  File "<pyshell#15>", line 1, in <module>
    x.index('龟')
ValueError: substring not found
>>> 
>>> 
>>> #替换，expandtabs()对缩进进行替换，replace(old, new, count == -1)替换字符串,默认替换全部而不是一个
>>> x = '在吗，在吗，在吗在吗'
>>> x.replace('在吗', '不在')
'不在，不在，不在不在'
>>> #translate(table)
>>> table = str.maketrans('ABCDEFG', '1234567')
>>> 'I love FishC'.translate(table)
'I love 6ish3'
>>> table = str.maketrans('ABCDEFG', '1234567', 'love')
>>> 'I love FishC'.translate(table)
'I  6ish3'
>>> #str.maketrans前两个参数是转换对应表格，第三个参数代表忽略的参数
>>> #判断，返回布尔类型的值，True或Flase
>>> x = '我爱python'
>>> x.startswith('我')
True
>>> x.startswith('你')
False
>>> #startswith()判断子字符串是否是源字符串的首字符
>>> x.endswith('on')
True
>>> #startswith(prefix[,start[,end]]),start和end是可选参数，表示从某个索引值开始
>>> x.startswith('我', 1)
False
>>> #end为到某个索引值结束
>>> 支持元组输入
Traceback (most recent call last):
  File "<pyshell#36>", line 1, in <module>
    支持元组输入
NameError: name '支持元组输入' is not defined
>>> y = '是非功过'
>>> if x.startswith(('你', '我', '是'))
	print('浪花淘尽英雄')
	
SyntaxError: invalid syntax
>>> if x.startswith(('你', '我', '是')):
	print('浪花淘尽英雄')

	
浪花淘尽英雄
>>> #istitle()判断字符串中单词首字母全为大写，其他全为小写
>>> #isupper()判断字符串中字母全为大写
>>> x = 'qwe'
>>> x.isupper()
False
>>> x.upper().isupper()
True


03.22
>>> #islower()判断所有字母是否都为小写
>>> #isalpha()判断一个字符串中是否只有字母
>>> #有空格也不可以
>>> x = 'qqqfqfwfw sfegreg'
>>> x.isalpha()
False
>>> y = '阿萨sa'
>>> y.isalpha()
True
>>> #中文支持检测为字母
>>> #判断字符串中所有字符是否都可以打印。isprintable()
>>> #比如换行符'\n'就不可打印
>>> x.isprintable()
True
>>> 'sas\n'.isprintable()
False
>>> #判断数字isdecimal()  isdigit()   isnumeric()
>>> x = '12345'
>>> x.isdecimal()
True
>>> x.isdigit()
True
>>> x.isnumeric()
True
>>> 
>>> x = '2²'
>>> x.isdecimal()
False
>>> x.isdigit()
True
>>> x.isnumeric()
True
x = 'ⅠⅡⅢⅣⅤ'
>>> x.isnumeric()
True
>>> x.isdigit()
False
>>> x.isdecimal()
False
#每个都有自己的尺度和范围，并不是判断范围越大越好
>>> #集大成者isalnum(),只要符合isdecimal()  isdigit()    isnumeric()   isalpha()中任意一个返回True,isalnum()结果为True.
>>> #isidentifier()判断字符串是否是一个合法的python标识符
>>> 'liu neng'.isidentifier()
False
>>> 'liuneng'.isidentifier()
True
>>> '21312sfwf'.isidentifier()
False
>>> 'ewer23432'.isidentifier()
True
>>> #判断一个标识符是否是python保留标识符，用keyword库
>>> import keyword
>>> keyword.iskeyword('if')
True
>>> keyword.iskeyword('py')
False

03.26
 #strip()去空白
>>> ' af a   '.strip()
'af a'
>>> #lstrip()左侧去空白,rstrip()右侧去空白
>>> 'www.ewrbty.com'.lstrip('www.')
'ewrbty.com'
>>> 'www.ewrbty.com'.lstrip('wcom.')
'ewrbty.com'
>>> 'www.ewrbty.com'.rstrip('wcom.')
'www.ewrbty'
>>> #到首个不是指定字符处停止
>>> #removeprefix()删前缀，removesuffix()删后缀，删除指定字符串，strip()删字符
>>> 'www.ewrbty.com'.removeprefix('www.')
Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    'www.ewrbty.com'.removeprefix('www.')
AttributeError: 'str' object has no attribute 'removeprefix'
>>> #3.9版本可用
>>> #拆分
>>> #partition()
>>> www.ewrbty.com'.partition('.')
SyntaxError: invalid syntax
>>> 'www.ewrbty.com'.partition('.')
('www', '.', 'ewrbty.com')
>>> #rpartition()从右往左分割
>>> #split(sep = None, maxsplit = -1), 第一个参数指定分隔符，第二个指定分割次数，-1指全切,rsplit从右往左
>>> '刘能，赵四，大拿'.split()
['刘能，赵四，大拿']
>>> '刘能 赵四 大拿'.split()
['刘能', '赵四', '大拿']
>>> '刘能，赵四，大拿'.split('，')
['刘能', '赵四', '大拿']
>>> '刘能，赵四，大拿'.split('，',1)
['刘能', '赵四，大拿']
>>> #\n----Linux系统，\r----MacOS系统，\r\n----Windows系统
>>> '刘能\n赵四\n大拿'.split('\n')
['刘能', '赵四', '大拿']
>>> #splitlines()的作用就是对换行符进行分割
>>> #True包含分隔符，Flase不包含分隔符
>>> '.'.join(('www','wqqrq','com))
	  
SyntaxError: EOL while scanning string literal
>>> '.'.join(['www','wqqrq','com])
	  
SyntaxError: EOL while scanning string literal
>>> '.'.join(('www','wer','com'))
'www.wer.com'
>>> ''.join(('sasd','sasd'))
'sasdsasd'
>>> #拼接，join更实用
>>> s = qwe
Traceback (most recent call last):
  File "<pyshell#29>", line 1, in <module>
    s = qwe
NameError: name 'qwe' is not defined
>>> s = 'adf'
>>> s += s
>>> s
'adfadf'
>>> #次数多时join方法运行更快


 #格式化字符串
>>> year = 2001
>>> '小明生于year年'
'小明生于year年'
>>> '小明生于{}年'format(year)
SyntaxError: invalid syntax
>>> '小明生于{}年'.format(year)
'小明生于2001年'
>>> '1 + 2 = {},2的平方是{},3的三次方{}'.format(1+2, 2*2, 3*3*3)
'1 + 2 = 3,2的平方是4,3的三次方27'
>>> '{}看到{}就很激动'.format('华农', '竹鼠')
'华农看到竹鼠就很激动'
>>> '{1}看到{0}就很激动'.format('华农', '竹鼠')
'竹鼠看到华农就很激动'
>>> #参数中的字符串被当作元组中的元素对待，因此从0开始
>>> '{0}{0}{1}{1}'.format('风','火')
'风风火火'
>>> '{x}看到{y}就很激动'.format(x = '华农', y = '竹鼠')
'华农看到竹鼠就很激动'

>>> '这是{name},他有很多{0},{name}总是在{0}家找到用不上的东西'.format('兄弟',name = '华农')
'这是华农,他有很多兄弟,华农总是在兄弟家找到用不上的东西'
>>> '这是{name},他有很多{1},{0}总是在{1}家找到用不上的东西'.format(name = '华农','兄弟')
SyntaxError: positional argument follows keyword argument
>>> #位置参数跟在关键字参数之后

>>> '这是{name},他有很多{1},{name}总是在{1}家找到用不上的东西'.format(name = '华农','兄弟')
SyntaxError: positional argument follows keyword argument
>>> #出现这个bug的原因在于参数位置不正确，关键字参数必须跟随在位置参数后面! 因为python函数在解析参数时, 是按照顺序来的, 位置参数是必须先满足, 才能考虑其他可变参数.
>>> #输出单纯的{}
>>> '{}, {}, {}'.foemat(1, '{}', 2)
Traceback (most recent call last):
  File "<pyshell#21>", line 1, in <module>
    '{}, {}, {}'.foemat(1, '{}', 2)
AttributeError: 'str' object has no attribute 'foemat'
>>> '{}, {}, {}'.format(1, '{}', 2)
'1, {}, 2'
>>> '{}, {{}}, {}'.format(1, 2)
'1, {}, 2'
>>> #对齐
>>> '{:^}'.format(123)
'123'
>>> '{:^10}'.format(123)
'   123    '
>>> #:是必须的，它的左边是位置或关键字索引，右边是格式化选项
^是居中对齐，10是width,宽度，总格数
SyntaxError: invalid syntax
>>> '{:<10}'.format(123)
'123       '
>>> '{:>10}'.format(123)
'       123'
>>> '{:>10}{:<10}'.format(123,321)
'       123321       '
>>> '{1:>10}{0:<10}'.format(123,321)
'       321123       '
>>> '{:>010}'.format(123)
'0000000123'
>>> '{:>010}'.format(-123)
'000000-123'
>>> '{:010}'.format(-123)
'-000000123'
>>> #0感知正负号，只对数字有效
>>> '{:010}'.format('sv')
Traceback (most recent call last):
  File "<pyshell#37>", line 1, in <module>
    '{:010}'.format('sv')
ValueError: '=' alignment not allowed in string format specifier
>>> '{1:@>10}{0:%<10}'.format(123,321)
'@@@@@@@321123%%%%%%%'
>>> '{:0=10}'.format(-123)
'-000000123'
>>> '{:0>10}'.format(-123)
'000000-123'
>>> #=强制填充在符号之前并数字之后的位置，适用于‘+000123’，‘-000123’等
>>> 


>>> #03.28
>>> #符号选项，一共三个  +，-，空格
>>> '{:+}{:-}'.format(520, -250)
'+520-250'
>>> '{:+} {:-}'.format(520, -250)
'+520 -250'
>>> #千分线的分隔符 ,和_   如果位数不足，千位分隔符是不现实的
>>> '{:,}'.format(123)
'123'
>>> '{:,}'.format(123456789)
'123,456,789'
>>> '{:_}'.format(123456789)
'123_456_789'
>>> #精度  对于[type]设置为'f'或'F'的浮点数来说，是限定小数点后显示多少个数位
>>> #                     'g'或'G'的浮点数来说，是限定小数点前后一共显示多少个数位
>>> #对非数字类型来说，限定的是最大字段的大小
>>> #对整数类型来说，则不允许使用[.precision]选项
>>> '{:.2f}'.format(3.14159)
'3.14'
>>> '{:.2g}'.format(3.14159)
'3.1'
>>> '{:.6}'.format('qwe rtyu')
'qwe rt'
>>> '{:.6}'.format(3.14159)
'3.14159'
>>> '{:.6}'.format(3.14159265)
'3.14159'
>>> '{:.6}'.format('3.14159265')
'3.1415'
>>> '{:.2}'.format(12345)
Traceback (most recent call last):
  File "<pyshell#18>", line 1, in <module>
    '{:.2}'.format(12345)
ValueError: Precision not allowed in integer format specifier
>>> #精度选项不能用在整数上
>>> #type 类型选项，决定数据应当如何呈现
>>> #'b' 将参数以二进制的形式输出
>>> #'c' 将参数以 Unicode 字符的形式输出
>>> #'d' 将参数以十进制的形式输出
>>> #'x','X' 将参数以十六进制的形式输出
>>> #'n'跟'd'类似，不同之处在于它会使用当前语言环境设置的分隔符插入到恰当的位置
>>> #None跟'd'一样
>>> '{:b}'.format(80)
'1010000'
>>> '{:#b}'.format(80)
'0b1010000'
>>> '{:c}'.format(80)
'P'
>>> '{:d}'.format(80)
'80'
>>> '{:#d}'.format(80)
'80'
>>> '{:o}'.format(80)
'120'
>>> '{:#o}'.format(80)
'0o120'
>>> #'e' 将参数以科学记数法的形式输出(以字母'e'来标示指数，默认精度为6)
>>> #'E' 将参数以科学记数法的形式输出(以字母'E'来标示指数，默认精度为6)
>>> #'f'将参数以定点表示法的形式输出("不是数”用'nan'标示，无穷用inf标示，默认精度为6)
>>> #'F' 将参数以定点表示法的形式输出("不是数"用'NAN标示无穷用'INF'标示，默认精度为6)
>>> #'g' 通用格式，小数以'f'形式输出，大数以'e'的形式输出
>>> #'G' 通用格式，小数以'F'形式输出，大数以'E'的形式输出
>>> #'n' 跟'g'类似，不同之处在于它会使用当前语言环境设置的分限符插入到恰当的位置
>>> #'%'以百分比的形式输出(将数字乘以100并显示为定点表示法('f')的形式，后面附带一个百分号
>>> #None 类似于'g'，不同之处在于当使用定点表示法时，小数点后将至少显示一位；默认精度与给定值所需的精度一致
>>> #这些类型适用于浮点数或负数
>>> '{:e}'.format(80)
'8.000000e+01'
>>> '{:e}'.format(3.14159)
'3.141590e+00'
>>> '{:f}'.format(3.14159)
'3.141590'
>>> '{:g}'.format(123456789)
'1.23457e+08'
>>> '{:g}'.format(1234.56789)
'1234.57'
>>> '{:%}'.format(0.98)
'98.000000%'
>>> '{:.2%}'.format(0.98)
'98.00%'
>>> '{:.{prec}}'.format(3.1415, prec = 2)
'3.1'
>>> '{:.{prec}f}'.format(3.1415, prec = 2)
'3.14'
>>> "{:{fill}{align}{width}.{prec}{ty}}".format{3.1415, fill="+",align="^",width=10,prec=3,ty='g'}
SyntaxError: invalid syntax
>>> "{:{fill}{align}{width}.{prec}{ty}}".format(3.1415, fill="+",align="^",width=10,prec=3,ty='g')
'+++3.14+++'
>>> #f-字符串
>>> #f或F都可以
>>> #代替format
>>> year = 2001

>>> '小明生于{}年'.format(year)
'小明生于2001年'
>>> '小明生于{}年'.format(year)
'小明生于2001年'
>>> f'小明生于{year}年'
'小明生于2001年'

>>> '1 + 2 = {},2的平方是{},3的三次方{}'.format(1+2, 2*2, 3*3*3)
'1 + 2 = 3,2的平方是4,3的三次方27'
>>> f'1 + 2 = {1 + 2},2的平方是{2^2},3的三次方{3*3*3}'
'1 + 2 = 3,2的平方是0,3的三次方27'
>>> f'1 + 2 = {1 + 2},2的平方是{2*2},3的三次方{3*3*3}'
'1 + 2 = 3,2的平方是4,3的三次方27'
>>> '{:010}'.format(-123)
'-000000123'
>>> f'{-123:010}'
'-000000123'
>>> f'{123456789:,}'
'123,456,789'
>>> "{:{fill}{align}{width}.{prec}{ty}}".format(3.1415, fill="+",align="^",width=10,prec=3,ty='g')
'+++3.14+++'
>>> fill="+"
>>> align="^"
>>> width=10
>>> prec=3
>>> ty='g'
>>> f'{3.1415:{fill}{align}{width}.{prec}{ty}}'
'+++3.14+++'
>>> #适用于3.6版本以上，3.6版本以下不识别，开源程序中更常用format方法，因为不知道会用在哪一版本python中

03.29
>>> #序列，  可变--列表，不可变--元组，字符串
>>> #能够作用于列表的运算符和函数
>>> #+  *
>>> [1 22 3]+[4 5 6]
SyntaxError: invalid syntax
>>> [1 2 3]+[4 5 6]
SyntaxError: invalid syntax
>>> [1, 2, 3]+[4, 5, 6]
[1, 2, 3, 4, 5, 6]
>>> (1, 2, 3)+(4, 5, 6)
(1, 2, 3, 4, 5, 6)
>>> '123'+'456'
'123456'
>>> [1, 2, 3]*3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
>>> (1, 2, 3)*3
(1, 2, 3, 1, 2, 3, 1, 2, 3)
>>> '123'*3
'123123123'
>>> s = [1, 2, 3]
>>> id(s)
1673879227584
>>> s *=2
>>> s
[1, 2, 3, 1, 2, 3]
>>> id(s)
1673879227584
>>> #每个对象有三个基本属性，唯一标志，类型和值
>>> #唯一标志，不变，相当于身份证
>>> t = (1, 2, 3)
>>> id(t)
1673879544832
>>> t *= 2
>>> id(t)
1673879352128
>>> #is 和is not
>>> #判断id值是否相等
>>> #同一性运算符
>>> #in和not in判断的是包含问题
>>> 'liu' in 'liuneng'
True
>>> 'zhaosi' not in 'liuneng'
True
>>> #del语句用于删除一个或几个指定对象
>>> x
Traceback (most recent call last):
  File "<pyshell#29>", line 1, in <module>
    x
NameError: name 'x' is not defined
>>> x ='qer'
>>> y = (1, 2, 3)
>>> x
'qer'
>>> y
(1, 2, 3)
>>> del x, y
>>> x
Traceback (most recent call last):
  File "<pyshell#35>", line 1, in <module>
    x
NameError: name 'x' is not defined
>>> y
Traceback (most recent call last):
  File "<pyshell#36>", line 1, in <module>
    y
NameError: name 'y' is not defined
>>> x = [1, 2, 3, 4, 5]
>>> del x[1:4]
>>> y = [1, 2, 3, 4, 5]
>>> del y[3]
>>> x
[1, 5]
>>> y
[1, 2, 3, 5]
>>> z = [1, 2, 3, 4, 5]
>>> z[1:4] = []
>>> z
[1, 5]
>>> #上为切片，del可完成切片也无法实现的操作
>>> z = [1, 2, 3, 4, 5]
>>> del z[::2]
>>> z
[2, 4]
>>> #步进为2，删除第一三五个元素
>>> z = [1, 2, 3, 4, 5]
>>> z[::2] = 【】
SyntaxError: invalid character in identifier
>>> z[::2] = []
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    z[::2] = []
ValueError: attempt to assign sequence of size 0 to extended slice of size 3
>>> z = [1, 2, 3, 4, 5]

>>> z.clear()
>>> z
[]
>>> z = [1, 2, 3, 4, 5]
>>> del z[:]
>>> z = [1, 2, 3, 4, 5]
>>> del z[::1]
>>> z
[]
 

>>> 
 #序列相关函数
>>> #list()把字符串元组转换成列表
>>> list('qwert')
['q', 'w', 'e', 'r', 't']
>>> list((1, 2, 3, 4, 5))
[1, 2, 3, 4, 5]
>>> #tuple()把一个可迭代对象转换成元组
>>> tuple('qwert')
('q', 'w', 'e', 'r', 't')
>>> tuple([1, 2, 3, 4, 5])
(1, 2, 3, 4, 5)
>>> #str()把一个可迭代对象转换成字符串
>>> str([1, 2, 3, 4, 5])
'[1, 2, 3, 4, 5]'
>>> str((1, 2, 3, 4, 5))
'(1, 2, 3, 4, 5)'
>>> max()  min()
SyntaxError: invalid syntax
>>> s = [1, 1, 2, 3, 5]
>>> min(s)
1
>>> #找到列表最小值
>>> t = 'FishC'
>>> max(t)
's'
>>> #字符串找到的是编码值
>>> s = []
>>> min(s)
Traceback (most recent call last):
  File "<pyshell#18>", line 1, in <module>
    min(s)
ValueError: min() arg is an empty sequence
>>> min(s, default = '什么都没有')
'什么都没有'
>>> min(1, 2, 34, 5,0)
0
>>> #len()和sum()
>>> #len()有可承受范围
>>> len(range(2**100))
Traceback (most recent call last):
  File "<pyshell#23>", line 1, in <module>
    len(range(2**100))
OverflowError: Python int too large to convert to C ssize_t
>>> #64位操作系统是2^64-1,32位是2^32-1
>>> 2^2
0
>>> 2**3
8
>>> s = [1, 4, 75, 2, 5]
>>> sum(s)
87
>>> sum(s, start = 1000)
1087
>>> #sorted()和reversed()
>>> s = [1, 2, 3, 0, 6]
>>> sorted(s)
[0, 1, 2, 3, 6]
>>> s
[1, 2, 3, 0, 6]
>>> s.sort()
>>> s
[0, 1, 2, 3, 6]
>>> #sorted()函数不改变原列表，而是创建一个新列表，列表的sort方法是对原列表排序
>>> s = [1, 2, 3, 0, 6]
>>> sorted(s, reverse = True)
[6, 3, 2, 1, 0]
>>> t = ['Fish', 'Book', 'Pencil', 'Banana']
>>> sorted(t)
['Banana', 'Book', 'Fish', 'Pencil']
>>> sorted(t, key = len)
['Fish', 'Book', 'Pencil', 'Banana']
>>> #key为干预排序算法的函数，无key时sorted()是对字符串的编码值对比，第一个相同就对比第二个
>>> t.sort(key = len)
>>> t
['Fish', 'Book', 'Pencil', 'Banana']
>>> #所以长度相同时是按原列表顺序来排
>>> #sort()只处理列表，sorted()对序列都可以处理
>>> #reversed()函数和列表的reverse()方法
>>> s = [1, 3, 6, 3, 8]
>>> reversed(s)
<list_reverseiterator object at 0x0000020E4CD65940>
>>> #返回结果是一个迭代器，暂时理解为可迭代对象
>>> list(reversed(s))
[8, 3, 6, 3, 1]
>>> list(reversed('Fish'))
['h', 's', 'i', 'F']
>>> #字符颠倒
>>> list(reversed((1, 3, 5, 3,8)))
[8, 3, 5, 3, 1]
>>> list(reversed(range(0, 10)))
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]


 #all()判断可迭代对象中是否所有对象都为真，any()判断可迭代对象中是否存在某个元素为真
>>> x =[1, 1, 0]
>>> y = [1, 3, 8]
>>> all(x)
False
>>> all(y)
True
>>> any(x)
True
>>> any(y)
True
>>> #enumerate()函数用于返回一个枚举对象，它的功能就是将可迭代对象中的每个元素及从0开始的序号共同构成一个二元组的列表。
>>> season = ['Spring', 'Summer', 'Fall', 'Winter']
>>> enumerate(seasons)
Traceback (most recent call last):
  File "<pyshell#11>", line 1, in <module>
    enumerate(seasons)
NameError: name 'seasons' is not defined
>>> enumerate(season)
<enumerate object at 0x00000240F0E91740>
>>> list(enumerate(season))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
>>> list(enumerate(season, 10))
[(10, 'Spring'), (11, 'Summer'), (12, 'Fall'), (13, 'Winter')]
>>> #zip()函数用于创建一个聚合多个可迭代对象的迭代器。
#它会将作为参数传入的每个可迭代对象的每个元素依次组合成元组，即第一个元组包含来自每个参数的第i个元素。
>>> x = [1, 2, 3]
>>> y = [4, 5, 6]
>>> zipped = zip(x, y)
>>> list(zipped)
[(1, 4), (2, 5), (3, 6)]
>>> z = [7,8,9]
>>> zipped = zip(x, y, z)
>>> list(zipped)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
>>> 
>>> z = 'qwert'
>>> zipped = zip(x, y, z)
>>> list(zipped)
[(1, 4, 'q'), (2, 5, 'w'), (3, 6, 'e')]
>>> #对于rt,可以使用itertools模块，里面有一个zip-longest()函数
>>> import itertools
>>> zipped = itertools.zip_longest(x, y, z)
>>> list(zipped)
[(1, 4, 'q'), (2, 5, 'w'), (3, 6, 'e'), (None, None, 'r'), (None, None, 't')]
>>> #自动填充为None
>>> #map（ ）函数会根据提供的函数对指定的可迭代对象的每个元素进行运算，并将返回运算结果的迭代器
>>> map(ord, 'FishC')
<map object at 0x00000240F0E75F40>
>>> mapped = map(ord, 'FishC')
>>> list(mapped)
[70, 105, 115, 104, 67]
>>> #ord是求出这个字符对应的unicode编码
>>> map函数从FishC中每次取出一个字符，交给ord函数，再把ord函数得到的编码值给mapped
SyntaxError: invalid character in identifier
>>> mapped = map(pow, [2, 3, 10], [5, 2, 3])
>>> list(mapped)
[32, 9, 1000]
>>> mapped = map(pow, [2], [5])
>>> list(mapped)
[32]
>>> mapped = map(pow, 2, 2)
Traceback (most recent call last):
  File "<pyshell#42>", line 1, in <module>
    mapped = map(pow, 2, 2)
TypeError: 'int' object is not iterable
>>> list(map(max,[1, 2, 3],[2, 2, 2], [0, 5, 7, 9]))
[2, 5, 7]
>>> list(map(max,[1, 2, 3],[2, 2, 2], [0, 5, 9, 7]))
[2, 5, 9]
>>> #filter()函数会根据提供的函数对指定的可迭代对象的每个元素进行运算，并将运算结果为真的元素，以迭代器的形式返回。
>>> list(filter(str.islower, 'FishC'))
['i', 's', 'h']

>>> #迭代器与可迭代对象
>>> #一个迭代器肯定是一个可迭代对象
#区别：可迭代对象可以重复使用；迭代器则是一次性的
>>> mapped = map(ord, 'FishC')
>>> for each in mapped:
	print(each)

	
70
105
115
104
67
>>> list(mapped)
[]
>>> #将可迭代对象转换成迭代器，可以使用iter()函数
>>> x = [1, 2, 3, 4, 5]
>>> y = iter(x)
>>> type(x)
<class 'list'>
>>> type(y)
<class 'list_iterator'>
>>> #y的类型是一个列表的迭代器
>>> #next()函数专门用于迭代器，作用是逐个将迭代器中的元素提取出来
>>> next(y)
1
>>> next(y)
2
>>> 
>>> next(y)
3
>>> next(y)
4
>>> next(y)
5
>>> next(y)
Traceback (most recent call last):
  File "<pyshell#83>", line 1, in <module>
    next(y)
StopIteration
>>> #此时y是空的，无法提取，会“报错”，这是异常，不是错误，异常可控，错误不可控
>>> z = iter(x)
>>> next(z, '没了')
1
>>> next(z, '没了')
2
>>> next(z, '没了')
3
>>> next(z, '没了')
4
>>> next(z, '没了')
5
>>> next(z, '没了')
'没了'
>>> next(z, '没了')
'没了'
>>> #不想出来异常，对next()函数加入第二个参数

 #字典
>>> #字典是Python中唯一实现映射关系的内置类型。